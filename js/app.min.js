(()=>{"use strict";class t{constructor(t="form",s=null){this.forms=document.querySelectorAll(t),this.inputs=document.querySelectorAll("input"),this.task={},this.container=document.querySelector(s)}handlerTasks(){this.forms.forEach((t=>{t.addEventListener("submit",(s=>{s.preventDefault(),this.inputs.forEach((t=>{const s=t.value,e=Math.random();let a=this.taskConstructor(e,s),n=this.taskTemplate(a,Object.keys(this.task).length);this.container.insertAdjacentHTML("beforeend",n)})),t.reset()}))}))}taskConstructor(t,s){const e={id:t,value:s};return this.task[e.id]=e,localStorage.setItem(t,s),{...e}}taskRemove(){this.container.addEventListener("click",(t=>{const s=t.target;if(s.classList.contains("btn-remove")){const t=s.closest(".task-item").dataset.id,e=s.closest(".task-item");e.classList.remove("show"),e.classList.add("hide"),setTimeout((()=>e.remove()),900),delete this.task[t],localStorage.removeItem(t),setTimeout((()=>this.cheackTasks()),900)}}))}taskTemplate({id:t=null,value:s=null},e,a=!1){return a?`\n        <div class="task-item show" data-id="${t}">\n          <div class="task-item__num">${e+1}</div>\n          <p class="task-item__text">${s}</p>\n          <div class="task-item__btn">\n            <button class="btn btn-remove"></button>\n          </div>\n        </div>\n      `:`\n        <div class="task-item" data-id="${t}">\n          <div class="task-item__num">${e}</div>\n          <p class="task-item__text">${s}</p>\n          <div class="task-item__btn">\n            <button class="btn btn-remove"></button>\n          </div>\n        </div>\n      `}cheackTasks(){this.container.innerHTML="",Object.values(this.task).forEach(((t,s)=>{const e=this.taskTemplate(t,s,!0);this.container.insertAdjacentHTML("beforeend",e)}))}chackLocalStorage(){Object.entries(localStorage).forEach((t=>{const s={id:t[0],value:t[1]};this.task[s.id]=s})),this.cheackTasks()}init(){this.chackLocalStorage(),this.handlerTasks(),this.taskRemove()}}window.addEventListener("DOMContentLoaded",(()=>{new t("form",".todo-box__container").init()}))})();